{"file":"PostalCodeDeliveries.vue2.mjs","mappings":"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":[],"sources":["../../../../../components/dashboard/PostalCodeDeliveries.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, computed, onMounted } from 'vue';\n\n// 1. TypeScript Interfaces per definire la struttura dei dati\ninterface TimeSlotDelivery {\n  timeSlot: string;\n  count: number;\n  onTime: number;\n}\n\ninterface PostalCodeData {\n  postalCode: string;\n  zone: string;\n  deliveries: TimeSlotDelivery[];\n  totalDeliveries: number;\n  averageTime: number;\n}\n\n// Interfaccia per la riga di dati UNIFICATA mostrata in tabella\ninterface PostalCodeStat {\n  postalCode: string;\n  zone: string;\n  deliveryCount: number;\n  onTimeCount: number;\n  onTimePercentage: number;\n  averageTime: number;\n  timeSlot?: string; // Opzionale, solo per la vista per fascia oraria\n}\n\n// 2. Stato reattivo\nconst isLoading = ref(true);\nconst search = ref('');\nconst postalCodeDeliveries = ref<PostalCodeData[]>([]);\nconst lastUpdate = ref('');\nconst selectedTimeSlot = ref('Tutte');\nconst timeSlots = ['08:00-10:00', '10:00-12:00', '12:00-14:00', '14:00-16:00', '16:00-18:00', '18:00-20:00'];\n\n// 3. Logica Unificata (Computed Properties)\nconst isAllTimeSlots = computed(() => selectedTimeSlot.value === 'Tutte');\n\n// UNIFICHIAMO i dati qui, una volta per tutte. Il resto del codice sarà molto più semplice.\nconst filteredData = computed((): PostalCodeStat[] => {\n  if (isAllTimeSlots.value) {\n    return postalCodeDeliveries.value.map(pc => {\n      const totalOnTime = pc.deliveries.reduce((sum, slot) => sum + slot.onTime, 0);\n      return {\n        postalCode: pc.postalCode,\n        zone: pc.zone,\n        deliveryCount: pc.totalDeliveries,\n        onTimeCount: totalOnTime,\n        onTimePercentage: pc.totalDeliveries > 0 ? (totalOnTime / pc.totalDeliveries) * 100 : 0,\n        averageTime: pc.averageTime,\n      };\n    }).sort((a, b) => b.deliveryCount - a.deliveryCount);\n  } else {\n    return postalCodeDeliveries.value.map(pc => {\n      const slotData = pc.deliveries.find(d => d.timeSlot === selectedTimeSlot.value) || { count: 0, onTime: 0 };\n      return {\n        postalCode: pc.postalCode,\n        zone: pc.zone,\n        deliveryCount: slotData.count,\n        onTimeCount: slotData.onTime,\n        onTimePercentage: slotData.count > 0 ? (slotData.onTime / slotData.count) * 100 : 0,\n        averageTime: pc.averageTime,\n        timeSlot: selectedTimeSlot.value,\n      };\n    }).sort((a, b) => b.deliveryCount - a.deliveryCount);\n  }\n});\n\n// Ora `slotTotals` non ha più bisogno di `if/else`\nconst slotTotals = computed(() => {\n    const totals = filteredData.value.reduce((acc, item) => {\n        acc.totalDeliveries += item.deliveryCount;\n        acc.onTime += item.onTimeCount;\n        return acc;\n    }, { totalDeliveries: 0, onTime: 0 });\n\n    const averageTime = postalCodeDeliveries.value.length > 0\n        ? Math.round(postalCodeDeliveries.value.reduce((acc, pc) => acc + pc.averageTime, 0) / postalCodeDeliveries.value.length)\n        : 0;\n\n    return {\n        totalDeliveries: totals.totalDeliveries,\n        onTime: totals.onTime,\n        late: totals.totalDeliveries - totals.onTime,\n        averageTime: averageTime,\n        onTimePercentage: totals.totalDeliveries > 0 ? (totals.onTime / totals.totalDeliveries) * 100 : 0,\n    };\n});\n\n// HEADERS DINAMICI: la soluzione per un template pulito\nconst dynamicHeaders = computed(() => {\n    const baseHeaders = [\n        { title: 'CAP', key: 'postalCode', align: 'start' },\n        { title: 'Zona', key: 'zone' },\n    ];\n    if (isAllTimeSlots.value) {\n        return [\n            ...baseHeaders,\n            { title: 'Totale Consegne', key: 'deliveryCount', align: 'center' },\n            { title: 'Puntualità', key: 'onTimePercentage', align: 'center' },\n            { title: 'Tempo Medio', key: 'averageTime', align: 'end', class: 'd-none d-md-table-cell' },\n        ];\n    }\n    return [\n        ...baseHeaders,\n        { title: 'Fascia Oraria', key: 'timeSlot', class: 'd-none d-sm-table-cell' },\n        { title: 'Consegne', key: 'deliveryCount', align: 'center' },\n        { title: 'Puntualità', key: 'onTimePercentage', align: 'center' },\n        { title: 'Tempo Medio', key: 'averageTime', align: 'end', class: 'd-none d-md-table-cell' },\n    ];\n});\n\n// 4. Azioni\nconst getProgressBarColor = (percentage: number) => {\n    if (percentage > 90) return 'success';\n    if (percentage > 75) return 'warning';\n    return 'error';\n};\n\nconst exportToCSV = () => { /* Logica semplificata grazie a dynamicHeaders e filteredData */ };\nconst exportToPDF = () => alert('Funzionalità PDF in sviluppo');\nconst refreshData = () => {\n    lastUpdate.value = new Date().toLocaleString('it-IT');\n};\n\n// 5. Lifecycle\nonMounted(() => {\n  setTimeout(() => {\n    postalCodeDeliveries.value = [\n        { postalCode: '20121', zone: 'Milano Centro', deliveries: [ { timeSlot: '08:00-10:00', count: 15, onTime: 14 }, { timeSlot: '10:00-12:00', count: 22, onTime: 20 }, { timeSlot: '12:00-14:00', count: 18, onTime: 17 }, { timeSlot: '14:00-16:00', count: 12, onTime: 11 }, { timeSlot: '16:00-18:00', count: 20, onTime: 19 }, { timeSlot: '18:00-20:00', count: 25, onTime: 23 } ], totalDeliveries: 112, averageTime: 22 },\n        { postalCode: '20122', zone: 'Milano Centro-Sud', deliveries: [ { timeSlot: '08:00-10:00', count: 12, onTime: 11 }, { timeSlot: '10:00-12:00', count: 18, onTime: 17 }, { timeSlot: '12:00-14:00', count: 15, onTime: 14 }, { timeSlot: '14:00-16:00', count: 10, onTime: 9 }, { timeSlot: '16:00-18:00', count: 16, onTime: 15 }, { timeSlot: '18:00-20:00', count: 20, onTime: 18 } ], totalDeliveries: 91, averageTime: 25 },\n        { postalCode: '20123', zone: 'Milano Centro-Ovest', deliveries: [ { timeSlot: '08:00-10:00', count: 10, onTime: 9 }, { timeSlot: '10:00-12:00', count: 15, onTime: 14 }, { timeSlot: '12:00-14:00', count: 12, onTime: 11 }, { timeSlot: '14:00-16:00', count: 8, onTime: 7 }, { timeSlot: '16:00-18:00', count: 14, onTime: 13 }, { timeSlot: '18:00-20:00', count: 18, onTime: 16 } ], totalDeliveries: 77, averageTime: 24 },\n        { postalCode: '20124', zone: 'Milano Centro-Est', deliveries: [ { timeSlot: '08:00-10:00', count: 14, onTime: 13 }, { timeSlot: '10:00-12:00', count: 20, onTime: 18 }, { timeSlot: '12:00-14:00', count: 16, onTime: 15 }, { timeSlot: '14:00-16:00', count: 11, onTime: 10 }, { timeSlot: '16:00-18:00', count: 18, onTime: 17 }, { timeSlot: '18:00-20:00', count: 22, onTime: 20 } ], totalDeliveries: 101, averageTime: 23 },\n        { postalCode: '20125', zone: 'Milano Nord', deliveries: [ { timeSlot: '08:00-10:00', count: 8, onTime: 7 }, { timeSlot: '10:00-12:00', count: 12, onTime: 11 }, { timeSlot: '12:00-14:00', count: 10, onTime: 9 }, { timeSlot: '14:00-16:00', count: 6, onTime: 5 }, { timeSlot: '16:00-18:00', count: 11, onTime: 10 }, { timeSlot: '18:00-20:00', count: 15, onTime: 13 } ], totalDeliveries: 62, averageTime: 28 }\n    ];\n    lastUpdate.value = new Date().toLocaleString('it-IT');\n    isLoading.value = false;\n  }, 1000);\n});\n</script>\n\n<template>\n  <v-card>\n    <v-card-item class=\"pa-4 pa-md-6\">\n      <div class=\"d-flex flex-wrap align-center gap-4\">\n        <div>\n          <h2 class=\"text-h5\">Analisi Consegne per CAP</h2>\n          <p class=\"text-subtitle-1 text-medium-emphasis\">Dati aggregati per codice postale e fasce orarie</p>\n        </div>\n        <v-spacer></v-spacer>\n        <div class=\"d-flex flex-wrap align-center gap-2\">\n          <v-select\n            v-model=\"selectedTimeSlot\"\n            :items=\"['Tutte', ...timeSlots]\"\n            label=\"Fascia Oraria\"\n            density=\"compact\"\n            variant=\"outlined\"\n            hide-details\n            style=\"min-width: 160px;\"\n          ></v-select>\n           <v-menu>\n            <template v-slot:activator=\"{ props }\">\n                <v-btn icon=\"mdi-dots-vertical\" v-bind=\"props\" title=\"Altre azioni\"></v-btn>\n            </template>\n            <v-list>\n                <v-list-item @click=\"refreshData\" prepend-icon=\"mdi-refresh\">Aggiorna</v-list-item>\n                <v-list-item @click=\"exportToCSV\" prepend-icon=\"mdi-file-delimited\">Esporta CSV</v-list-item>\n                <v-list-item @click=\"exportToPDF\" prepend-icon=\"mdi-file-pdf-box\">Esporta PDF</v-list-item>\n            </v-list>\n          </v-menu>\n        </div>\n      </div>\n\n      <v-row class=\"mt-4\">\n        <v-col v-for=\"(item, i) in [\n            { label: 'Totale Consegne', value: slotTotals.totalDeliveries, color: 'primary' },\n            { label: 'Puntuali', value: slotTotals.onTime, color: 'success' },\n            { label: 'In Ritardo', value: slotTotals.late, color: 'error' },\n            { label: 'Puntualità %', value: slotTotals.onTimePercentage, isPercentage: true }\n        ]\" :key=\"i\" cols=\"12\" sm=\"6\" md=\"3\">\n          <v-card variant=\"tonal\" :color=\"item.color\" class=\"d-flex flex-column pa-4 text-center h-100\">\n            <div class=\"text-h4 font-weight-bold\">{{ item.isPercentage ? `${item.value.toFixed(1)}%` : item.value }}</div>\n            <div class=\"text-body-1\">{{ item.label }}</div>\n            <template v-if=\"item.isPercentage\">\n                <v-spacer></v-spacer>\n                 <v-progress-linear\n                    :model-value=\"item.value\"\n                    :color=\"getProgressBarColor(item.value)\"\n                    height=\"6\"\n                    rounded\n                    class=\"mt-2\"\n                ></v-progress-linear>\n            </template>\n          </v-card>\n        </v-col>\n      </v-row>\n    </v-card-item>\n\n    <v-divider></v-divider>\n    \n    <v-text-field\n        v-model=\"search\"\n        label=\"Cerca per CAP o zona...\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"solo-filled\"\n        flat hide-details single-line\n    ></v-text-field>\n\n    <v-data-table\n      :headers=\"dynamicHeaders\"\n      :items=\"filteredData\"\n      :search=\"search\"\n      :loading=\"isLoading\"\n      item-value=\"postalCode\"\n      class=\"elevation-0\"\n    >\n        <template v-slot:loading>\n            <v-skeleton-loader type=\"table-row@5\"></v-skeleton-loader>\n        </template>\n        \n        <template v-slot:item.onTimePercentage=\"{ value }\">\n            <v-chip :color=\"getProgressBarColor(value)\" size=\"small\" class=\"font-weight-bold\">\n                {{ value.toFixed(1) }}%\n            </v-chip>\n        </template>\n\n        <template v-slot:item.averageTime=\"{ value }\">\n            {{ value }} min\n        </template>\n\n        <template v-slot:no-data>\n            <div class=\"pa-4 text-center\">Nessun dato trovato.</div>\n        </template>\n    </v-data-table>\n  </v-card>\n</template>\n\n<style scoped>\n.gap-2 { gap: 8px; }\n.gap-4 { gap: 16px; }\n</style>"],"version":3}