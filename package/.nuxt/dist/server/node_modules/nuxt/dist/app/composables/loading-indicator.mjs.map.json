{"file":"loading-indicator.mjs","mappings":";;AAEA,SAAS,yBAAyB,UAAU,SAAS;AACnD,QAAM,uBAAuB,UAAU,WAAW;AAClD,SAAO,IAAI,KAAK,KAAK,MAAM,KAAK,KAAK,uBAAuB,EAAE;AAChE;AACA,SAAS,uBAAuB,OAAO,IAAI;AACzC,QAAM,EAAE,WAAW,KAAK,WAAW,KAAK,YAAY,KAAK,aAAa,IAAG,IAAK;AAC1D,OAAK,qBAAqB;AAC9C,QAAM,UAAU,WAAY;AAC5B,QAAM,WAAW,IAAI,CAAC;AACtB,QAAM,YAAY,IAAI,KAAK;AAC3B,QAAM,QAAQ,IAAI,KAAK;AAMvB,QAAM,QAAQ,CAAC,QAAQ,OAAO;AAE5B,UAAM,QAAQ;AACd,QAAI,GAAG,KAAK;AAAA,EACb;AACD,WAAS,IAAI,KAAK,GAAG,QAAQ,CAAA,GAAI;AAC/B,QAAI,QAAQ,aAAa;AACvB;AAAA,IACN;AACI,QAAI,MAAM,KAAK;AACb,aAAO,OAAO,EAAE,OAAO,MAAM,MAAK,CAAE;AAAA,IAC1C;AAEI,aAAS,QAAQ,KAAK,IAAI,IAAI;AACT,UAAM,QAAQ,IAAI;AAMhC;AACL,gBAAU,QAAQ;AAAA,IAExB;AAAA,EACA;AAWE,WAAS,OAAO,QAAQ,IAAI;AAC1B,aAAS,QAAQ;AAIjB,QAAI,MAAM,OAAO;AACf,YAAM,QAAQ;AAAA,IACpB;AACI,QAAI,MAAM,OAAO;AACf,eAAS,QAAQ;AACjB,gBAAU,QAAQ;AAAA,IACxB;AAAA,EAGA;AAOE,WAAS,QAAQ;AAAA,EAKnB;AAmBE,MAAI,WAAW,MAAM;AAAA,EACpB;AAgBD,SAAO;AAAA,IACL;AAAA,IACA,UAAU,SAAS,MAAM,SAAS,KAAK;AAAA,IACvC,WAAW,SAAS,MAAM,UAAU,KAAK;AAAA,IACzC,OAAO,SAAS,MAAM,MAAM,KAAK;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACH;AACO,SAAS,oBAAoB,OAAO,IAAI;AAC7C,QAAM,UAAU,WAAY;AAC5B,QAAM,YAAY,QAAQ,sBAAR,QAAQ,oBAAsB,uBAAuB,IAAI;AAY3E,SAAO;AACT;","names":[],"sources":["../../../../../../../../node_modules/nuxt/dist/app/composables/loading-indicator.js"],"sourcesContent":["import { computed, getCurrentScope, onScopeDispose, ref } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nfunction defaultEstimatedProgress(duration, elapsed) {\n  const completionPercentage = elapsed / duration * 100;\n  return 2 / Math.PI * 100 * Math.atan(completionPercentage / 50);\n}\nfunction createLoadingIndicator(opts = {}) {\n  const { duration = 2e3, throttle = 200, hideDelay = 500, resetDelay = 400 } = opts;\n  const getProgress = opts.estimatedProgress || defaultEstimatedProgress;\n  const nuxtApp = useNuxtApp();\n  const progress = ref(0);\n  const isLoading = ref(false);\n  const error = ref(false);\n  let done = false;\n  let rafId;\n  let throttleTimeout;\n  let hideTimeout;\n  let resetTimeout;\n  const start = (opts2 = {}) => {\n    _clearTimeouts();\n    error.value = false;\n    set(0, opts2);\n  };\n  function set(at = 0, opts2 = {}) {\n    if (nuxtApp.isHydrating) {\n      return;\n    }\n    if (at >= 100) {\n      return finish({ force: opts2.force });\n    }\n    clear();\n    progress.value = at < 0 ? 0 : at;\n    const throttleTime = opts2.force ? 0 : throttle;\n    if (throttleTime && import.meta.client) {\n      throttleTimeout = setTimeout(() => {\n        isLoading.value = true;\n        _startProgress();\n      }, throttleTime);\n    } else {\n      isLoading.value = true;\n      _startProgress();\n    }\n  }\n  function _hide() {\n    if (import.meta.client) {\n      hideTimeout = setTimeout(() => {\n        isLoading.value = false;\n        resetTimeout = setTimeout(() => {\n          progress.value = 0;\n        }, resetDelay);\n      }, hideDelay);\n    }\n  }\n  function finish(opts2 = {}) {\n    progress.value = 100;\n    done = true;\n    clear();\n    _clearTimeouts();\n    if (opts2.error) {\n      error.value = true;\n    }\n    if (opts2.force) {\n      progress.value = 0;\n      isLoading.value = false;\n    } else {\n      _hide();\n    }\n  }\n  function _clearTimeouts() {\n    if (import.meta.client) {\n      clearTimeout(hideTimeout);\n      clearTimeout(resetTimeout);\n    }\n  }\n  function clear() {\n    if (import.meta.client) {\n      clearTimeout(throttleTimeout);\n      cancelAnimationFrame(rafId);\n    }\n  }\n  function _startProgress() {\n    done = false;\n    let startTimeStamp;\n    function step(timeStamp) {\n      if (done) {\n        return;\n      }\n      startTimeStamp ??= timeStamp;\n      const elapsed = timeStamp - startTimeStamp;\n      progress.value = Math.max(0, Math.min(100, getProgress(duration, elapsed)));\n      if (import.meta.client) {\n        rafId = requestAnimationFrame(step);\n      }\n    }\n    if (import.meta.client) {\n      rafId = requestAnimationFrame(step);\n    }\n  }\n  let _cleanup = () => {\n  };\n  if (import.meta.client) {\n    const unsubLoadingStartHook = nuxtApp.hook(\"page:loading:start\", () => {\n      start();\n    });\n    const unsubLoadingFinishHook = nuxtApp.hook(\"page:loading:end\", () => {\n      finish();\n    });\n    const unsubError = nuxtApp.hook(\"vue:error\", () => finish());\n    _cleanup = () => {\n      unsubError();\n      unsubLoadingStartHook();\n      unsubLoadingFinishHook();\n      clear();\n    };\n  }\n  return {\n    _cleanup,\n    progress: computed(() => progress.value),\n    isLoading: computed(() => isLoading.value),\n    error: computed(() => error.value),\n    start,\n    set,\n    finish,\n    clear\n  };\n}\nexport function useLoadingIndicator(opts = {}) {\n  const nuxtApp = useNuxtApp();\n  const indicator = nuxtApp._loadingIndicator ||= createLoadingIndicator(opts);\n  if (import.meta.client && getCurrentScope()) {\n    nuxtApp._loadingIndicatorDeps ||= 0;\n    nuxtApp._loadingIndicatorDeps++;\n    onScopeDispose(() => {\n      nuxtApp._loadingIndicatorDeps--;\n      if (nuxtApp._loadingIndicatorDeps === 0) {\n        indicator._cleanup();\n        delete nuxtApp._loadingIndicator;\n      }\n    });\n  }\n  return indicator;\n}\n"],"version":3}