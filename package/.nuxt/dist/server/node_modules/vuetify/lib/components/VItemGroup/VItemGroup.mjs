import { createVNode } from "vue";
/* empty css                */
import { makeComponentProps } from "../../composables/component.mjs";
import { useGroup, makeGroupProps } from "../../composables/group.mjs";
import { makeTagProps } from "../../composables/tag.mjs";
import { provideTheme, makeThemeProps } from "../../composables/theme.mjs";
import { genericComponent } from "../../util/defineComponent.mjs";
import { propsFactory } from "../../util/propsFactory.mjs";
const VItemGroupSymbol = Symbol.for("vuetify:v-item-group");
const makeVItemGroupProps = propsFactory({
  ...makeComponentProps(),
  ...makeGroupProps({
    selectedClass: "v-item--selected"
  }),
  ...makeTagProps(),
  ...makeThemeProps()
}, "VItemGroup");
const VItemGroup = genericComponent()({
  name: "VItemGroup",
  props: makeVItemGroupProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      isSelected,
      select,
      next,
      prev,
      selected
    } = useGroup(props, VItemGroupSymbol);
    return () => createVNode(props.tag, {
      "class": ["v-item-group", themeClasses.value, props.class],
      "style": props.style
    }, {
      default: () => {
        var _a;
        return [(_a = slots.default) == null ? void 0 : _a.call(slots, {
          isSelected,
          select,
          next,
          prev,
          selected: selected.value
        })];
      }
    });
  }
});
export {
  VItemGroup,
  VItemGroupSymbol,
  makeVItemGroupProps
};
//# sourceMappingURL=VItemGroup.mjs.map
