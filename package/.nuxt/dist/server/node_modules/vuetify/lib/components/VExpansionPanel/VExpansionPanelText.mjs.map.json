{"file":"VExpansionPanelText.mjs","mappings":";;;;;;;;AAQY,MAAC,+BAA+B,aAAa;AAAA,EACvD,GAAG,mBAAoB;AAAA,EACvB,GAAG,cAAa;AAClB,GAAG,qBAAqB;AACZ,MAAC,sBAAsB,iBAAgB,EAAG;AAAA,EACpD,MAAM;AAAA,EACN,OAAO,6BAA8B;AAAA,EACrC,MAAM,OAAO,MAAM;AACjB,QAAI;AAAA,MACF;AAAA,IACN,IAAQ;AACJ,UAAM,iBAAiB,OAAO,qBAAqB;AACnD,QAAI,CAAC,eAAgB,OAAM,IAAI,MAAM,8EAA8E;AACnH,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACD,IAAG,QAAQ,OAAO,eAAe,UAAU;AAC5C,cAAU,MAAMA,YAAa,mBAAmB;AAAA,MAC9C,gBAAgB;AAAA,IACtB,GAAO;AAAA,MACD,SAAS,MAAM;;AAAA,gBAACC,eAAgBD,YAAa,OAAO;AAAA,UAClD,SAAS,CAAC,0BAA0B,MAAM,KAAK;AAAA,UAC/C,SAAS,MAAM;AAAA,QACvB,GAAS,CAAC,MAAM,WAAW,WAAW,SAASA,YAAa,OAAO;AAAA,UAC3D,SAAS;AAAA,QACV,GAAE,EAAC,WAAM,YAAN,8BAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAACE,OAAQ,eAAe,WAAW,KAAK,CAAC,CAAC,CAAC;AAAA;AAAA,IAC7E,CAAK,CAAC;AACF,WAAO,CAAE;AAAA,EACb;AACA,CAAC;","names":["_createVNode","_withDirectives","_vShow"],"sources":["../../../../../../../../node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelText.mjs"],"sourcesContent":["import { createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\n// Components\nimport { VExpansionPanelSymbol } from \"./shared.mjs\";\nimport { VExpandTransition } from \"../transitions/index.mjs\"; // Composables\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\"; // Utilities\nimport { inject } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVExpansionPanelTextProps = propsFactory({\n  ...makeComponentProps(),\n  ...makeLazyProps()\n}, 'VExpansionPanelText');\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n  props: makeVExpansionPanelTextProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, expansionPanel.isSelected);\n    useRender(() => _createVNode(VExpandTransition, {\n      \"onAfterLeave\": onAfterLeave\n    }, {\n      default: () => [_withDirectives(_createVNode(\"div\", {\n        \"class\": ['v-expansion-panel-text', props.class],\n        \"style\": props.style\n      }, [slots.default && hasContent.value && _createVNode(\"div\", {\n        \"class\": \"v-expansion-panel-text__wrapper\"\n      }, [slots.default?.()])]), [[_vShow, expansionPanel.isSelected.value]])]\n    }));\n    return {};\n  }\n});\n//# sourceMappingURL=VExpansionPanelText.mjs.map"],"version":3}