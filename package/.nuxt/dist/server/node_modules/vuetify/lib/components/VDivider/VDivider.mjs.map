{"version":3,"file":"VDivider.mjs","sources":["../../../../../../../../node_modules/vuetify/lib/components/VDivider/VDivider.mjs"],"sourcesContent":["import { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VDivider.css\";\n\n// Composables\nimport { useTextColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\"; // Utilities\nimport { computed, toRef } from 'vue';\nimport { convertToUnit, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVDividerProps = propsFactory({\n  color: String,\n  inset: Boolean,\n  length: [Number, String],\n  opacity: [Number, String],\n  thickness: [Number, String],\n  vertical: Boolean,\n  ...makeComponentProps(),\n  ...makeThemeProps()\n}, 'VDivider');\nexport const VDivider = genericComponent()({\n  name: 'VDivider',\n  props: makeVDividerProps(),\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const dividerStyles = computed(() => {\n      const styles = {};\n      if (props.length) {\n        styles[props.vertical ? 'height' : 'width'] = convertToUnit(props.length);\n      }\n      if (props.thickness) {\n        styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = convertToUnit(props.thickness);\n      }\n      return styles;\n    });\n    useRender(() => {\n      const divider = _createVNode(\"hr\", {\n        \"class\": [{\n          'v-divider': true,\n          'v-divider--inset': props.inset,\n          'v-divider--vertical': props.vertical\n        }, themeClasses.value, textColorClasses.value, props.class],\n        \"style\": [dividerStyles.value, textColorStyles.value, {\n          '--v-border-opacity': props.opacity\n        }, props.style],\n        \"aria-orientation\": !attrs.role || attrs.role === 'separator' ? props.vertical ? 'vertical' : 'horizontal' : undefined,\n        \"role\": `${attrs.role || 'separator'}`\n      }, null);\n      if (!slots.default) return divider;\n      return _createVNode(\"div\", {\n        \"class\": ['v-divider__wrapper', {\n          'v-divider__wrapper--vertical': props.vertical,\n          'v-divider__wrapper--inset': props.inset\n        }]\n      }, [divider, _createVNode(\"div\", {\n        \"class\": \"v-divider__content\"\n      }, [slots.default()]), divider]);\n    });\n    return {};\n  }\n});\n//# sourceMappingURL=VDivider.mjs.map"],"names":["_createVNode"],"mappings":";;;;;;;;;AAUY,MAAC,oBAAoB,aAAa;AAAA,EAC5C,OAAO;AAAA,EACP,OAAO;AAAA,EACP,QAAQ,CAAC,QAAQ,MAAM;AAAA,EACvB,SAAS,CAAC,QAAQ,MAAM;AAAA,EACxB,WAAW,CAAC,QAAQ,MAAM;AAAA,EAC1B,UAAU;AAAA,EACV,GAAG,mBAAoB;AAAA,EACvB,GAAG,eAAc;AACnB,GAAG,UAAU;AACD,MAAC,WAAW,iBAAgB,EAAG;AAAA,EACzC,MAAM;AAAA,EACN,OAAO,kBAAmB;AAAA,EAC1B,MAAM,OAAO,MAAM;AACjB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,IACN,IAAQ;AACJ,UAAM;AAAA,MACJ;AAAA,IACN,IAAQ,aAAa,KAAK;AACtB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACD,IAAG,aAAa,MAAM,OAAO,OAAO,CAAC;AACtC,UAAM,gBAAgB,SAAS,MAAM;AACnC,YAAM,SAAS,CAAE;AACjB,UAAI,MAAM,QAAQ;AAChB,eAAO,MAAM,WAAW,WAAW,OAAO,IAAI,cAAc,MAAM,MAAM;AAAA,MAChF;AACM,UAAI,MAAM,WAAW;AACnB,eAAO,MAAM,WAAW,qBAAqB,gBAAgB,IAAI,cAAc,MAAM,SAAS;AAAA,MACtG;AACM,aAAO;AAAA,IACb,CAAK;AACD,cAAU,MAAM;AACd,YAAM,UAAUA,YAAa,MAAM;AAAA,QACjC,SAAS,CAAC;AAAA,UACR,aAAa;AAAA,UACb,oBAAoB,MAAM;AAAA,UAC1B,uBAAuB,MAAM;AAAA,QACvC,GAAW,aAAa,OAAO,iBAAiB,OAAO,MAAM,KAAK;AAAA,QAC1D,SAAS,CAAC,cAAc,OAAO,gBAAgB,OAAO;AAAA,UACpD,sBAAsB,MAAM;AAAA,QACtC,GAAW,MAAM,KAAK;AAAA,QACd,oBAAoB,CAAC,MAAM,QAAQ,MAAM,SAAS,cAAc,MAAM,WAAW,aAAa,eAAe;AAAA,QAC7G,QAAQ,GAAG,MAAM,QAAQ,WAAW;AAAA,MACrC,GAAE,IAAI;AACP,UAAI,CAAC,MAAM,QAAS,QAAO;AAC3B,aAAOA,YAAa,OAAO;AAAA,QACzB,SAAS,CAAC,sBAAsB;AAAA,UAC9B,gCAAgC,MAAM;AAAA,UACtC,6BAA6B,MAAM;AAAA,QACpC,CAAA;AAAA,MACT,GAAS,CAAC,SAASA,YAAa,OAAO;AAAA,QAC/B,SAAS;AAAA,MACV,GAAE,CAAC,MAAM,QAAS,CAAA,CAAC,GAAG,OAAO,CAAC;AAAA,IACrC,CAAK;AACD,WAAO,CAAE;AAAA,EACb;AACA,CAAC;","x_google_ignoreList":[0]}