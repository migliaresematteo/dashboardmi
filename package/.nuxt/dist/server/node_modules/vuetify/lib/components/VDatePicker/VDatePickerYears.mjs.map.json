{"file":"VDatePickerYears.mjs","mappings":";;;;;;;;;AAWY,MAAC,4BAA4B,aAAa;AAAA,EACpD,OAAO;AAAA,EACP,QAAQ,CAAC,QAAQ,MAAM;AAAA,EACvB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,YAAY;AACd,GAAG,kBAAkB;AACT,MAAC,mBAAmB,iBAAgB,EAAG;AAAA,EACjD,MAAM;AAAA,EACN,OAAO,0BAA2B;AAAA,EAClC,OAAO;AAAA,IACL,qBAAqB,UAAQ;AAAA,EAC9B;AAAA,EACD,MAAM,OAAO,MAAM;AACjB,QAAI;AAAA,MACF;AAAA,MACA;AAAA,IACN,IAAQ;AACJ,UAAM,UAAU,QAAS;AACzB,UAAM,QAAQ,gBAAgB,OAAO,YAAY;AACjD,UAAM,QAAQ,SAAS,MAAM;AAC3B,YAAM,OAAO,QAAQ,QAAQ,QAAQ,KAAI,CAAE;AAC3C,UAAI,MAAM,OAAO;AACjB,UAAI,MAAM,OAAO;AACjB,UAAI,MAAM,KAAK;AACb,cAAM,QAAQ,QAAQ,QAAQ,KAAK,MAAM,GAAG,CAAC;AAAA,MACrD;AACM,UAAI,MAAM,KAAK;AACb,cAAM,QAAQ,QAAQ,QAAQ,KAAK,MAAM,GAAG,CAAC;AAAA,MACrD;AACM,UAAI,OAAO,QAAQ,YAAY,QAAQ,KAAI,CAAE;AAC7C,aAAO,QAAQ,QAAQ,MAAM,GAAG;AAChC,aAAO,YAAY,MAAM,MAAM,GAAG,GAAG,EAAE,IAAI,OAAK;AAC9C,cAAM,OAAO,QAAQ,OAAO,MAAM,MAAM;AACxC,eAAO,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,IAAI,IAAI,CAAC;AACtD,eAAO;AAAA,UACL;AAAA,UACA,OAAO;AAAA,QACR;AAAA,MACT,CAAO;AAAA,IACP,CAAK;AACD,gBAAY,MAAM;AAChB,YAAM,QAAQ,MAAM,SAAS,QAAQ,QAAQ,QAAQ,MAAM;AAAA,IACjE,CAAK;AACD,UAAM,UAAU,YAAa;AAO7B,cAAU,MAAMA,YAAa,OAAO;AAAA,MAClC,SAAS;AAAA,MACT,SAAS;AAAA,QACP,QAAQ,cAAc,MAAM,MAAM;AAAA,MAC1C;AAAA,IACA,GAAO,CAACA,YAAa,OAAO;AAAA,MACtB,SAAS;AAAA,IACf,GAAO,CAAC,MAAM,MAAM,IAAI,CAAC,MAAM,MAAM;;AAC/B,YAAM,WAAW;AAAA,QACf,KAAK,MAAM,UAAU,KAAK,QAAQ,UAAU;AAAA,QAC5C,QAAQ,MAAM,UAAU,KAAK;AAAA,QAC7B,OAAO,MAAM,UAAU,KAAK,QAAQ,MAAM,QAAQ;AAAA,QAClD,SAAS;AAAA,QACT,MAAM,KAAK;AAAA,QACX,SAAS,MAAM,UAAU,KAAK,QAAQ,SAAS;AAAA,QAC/C,SAAS,MAAM;AACb,cAAI,MAAM,UAAU,KAAK,OAAO;AAC9B,iBAAK,qBAAqB,MAAM,KAAK;AACrC;AAAA,UACZ;AACU,gBAAM,QAAQ,KAAK;AAAA,QAC7B;AAAA,MACO;AACD,eAAO,WAAM,SAAN,+BAAa;AAAA,QAClB;AAAA,QACA;AAAA,QACA,OAAO;AAAA,MACf,OAAYA,YAAa,MAAMC,WAAY;AAAA,QACnC,OAAO;AAAA,MACf,GAAS,QAAQ,GAAG,IAAI;AAAA,IACxB,CAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,WAAO,CAAE;AAAA,EACb;AACA,CAAC;","names":["_createVNode","_mergeProps"],"sources":["../../../../../../../../node_modules/vuetify/lib/components/VDatePicker/VDatePickerYears.mjs"],"sourcesContent":["import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VDatePickerYears.css\";\n\n// Components\nimport { VBtn } from \"../VBtn/index.mjs\"; // Composables\nimport { useDate } from \"../../composables/date/index.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, nextTick, onMounted, watchEffect } from 'vue';\nimport { convertToUnit, createRange, genericComponent, propsFactory, templateRef, useRender } from \"../../util/index.mjs\"; // Types\n// Types\nexport const makeVDatePickerYearsProps = propsFactory({\n  color: String,\n  height: [String, Number],\n  min: null,\n  max: null,\n  modelValue: Number\n}, 'VDatePickerYears');\nexport const VDatePickerYears = genericComponent()({\n  name: 'VDatePickerYears',\n  props: makeVDatePickerYearsProps(),\n  emits: {\n    'update:modelValue': year => true\n  },\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const adapter = useDate();\n    const model = useProxiedModel(props, 'modelValue');\n    const years = computed(() => {\n      const year = adapter.getYear(adapter.date());\n      let min = year - 100;\n      let max = year + 52;\n      if (props.min) {\n        min = adapter.getYear(adapter.date(props.min));\n      }\n      if (props.max) {\n        max = adapter.getYear(adapter.date(props.max));\n      }\n      let date = adapter.startOfYear(adapter.date());\n      date = adapter.setYear(date, min);\n      return createRange(max - min + 1, min).map(i => {\n        const text = adapter.format(date, 'year');\n        date = adapter.setYear(date, adapter.getYear(date) + 1);\n        return {\n          text,\n          value: i\n        };\n      });\n    });\n    watchEffect(() => {\n      model.value = model.value ?? adapter.getYear(adapter.date());\n    });\n    const yearRef = templateRef();\n    onMounted(async () => {\n      await nextTick();\n      yearRef.el?.scrollIntoView({\n        block: 'center'\n      });\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": \"v-date-picker-years\",\n      \"style\": {\n        height: convertToUnit(props.height)\n      }\n    }, [_createVNode(\"div\", {\n      \"class\": \"v-date-picker-years__content\"\n    }, [years.value.map((year, i) => {\n      const btnProps = {\n        ref: model.value === year.value ? yearRef : undefined,\n        active: model.value === year.value,\n        color: model.value === year.value ? props.color : undefined,\n        rounded: true,\n        text: year.text,\n        variant: model.value === year.value ? 'flat' : 'text',\n        onClick: () => {\n          if (model.value === year.value) {\n            emit('update:modelValue', model.value);\n            return;\n          }\n          model.value = year.value;\n        }\n      };\n      return slots.year?.({\n        year,\n        i,\n        props: btnProps\n      }) ?? _createVNode(VBtn, _mergeProps({\n        \"key\": \"month\"\n      }, btnProps), null);\n    })])]));\n    return {};\n  }\n});\n//# sourceMappingURL=VDatePickerYears.mjs.map"],"version":3}