{"file":"VExpansionPanelTitle.mjs","mappings":";;;;;;;;;;;;AAYY,MAAC,gCAAgC,aAAa;AAAA,EACxD,OAAO;AAAA,EACP,YAAY;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AAAA,EACD,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS;AAAA,EACV;AAAA,EACD,aAAa;AAAA,EACb,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,QAAQ;AAAA,IACN,MAAM,CAAC,SAAS,MAAM;AAAA,IACtB,SAAS;AAAA,EACV;AAAA,EACD,UAAU;AAAA,EACV,GAAG,mBAAoB;AAAA,EACvB,GAAG,mBAAkB;AACvB,GAAG,sBAAsB;AACb,MAAC,uBAAuB,iBAAgB,EAAG;AAAA,EACrD,MAAM;AAAA,EACN,YAAY;AAAA,IACV;AAAA,EACD;AAAA,EACD,OAAO,8BAA+B;AAAA,EACtC,MAAM,OAAO,MAAM;AACjB,QAAI;AAAA,MACF;AAAA,IACN,IAAQ;AACJ,UAAM,iBAAiB,OAAO,qBAAqB;AACnD,QAAI,CAAC,eAAgB,OAAM,IAAI,MAAM,+EAA+E;AACpH,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACN,IAAQ,mBAAmB,OAAO,OAAO;AACrC,UAAM;AAAA,MACJ;AAAA,IACN,IAAQ,aAAa,KAAK;AACtB,UAAM,YAAY,SAAS,OAAO;AAAA,MAChC,cAAc,MAAM;AAAA,MACpB,UAAU,eAAe,SAAS;AAAA,MAClC,UAAU,eAAe,WAAW;AAAA,MACpC,YAAY,MAAM;AAAA,MAClB,UAAU,MAAM;AAAA,IACtB,EAAM;AACF,UAAM,OAAO,SAAS,MAAM,eAAe,WAAW,QAAQ,MAAM,eAAe,MAAM,UAAU;AACnG,cAAU,MAAMA;;AAAAA,4BAAgBC,YAAa,UAAU;AAAA,QACrD,SAAS,CAAC,2BAA2B;AAAA,UACnC,mCAAmC,eAAe,WAAW;AAAA,UAC7D,sCAAsC,MAAM;AAAA,UAC5C,mCAAmC,MAAM;AAAA,QAC1C,GAAE,uBAAuB,OAAO,MAAM,KAAK;AAAA,QAC5C,SAAS,CAAC,sBAAsB,OAAO,gBAAgB,OAAO,MAAM,KAAK;AAAA,QACzE,QAAQ;AAAA,QACR,YAAY,eAAe,SAAS,QAAQ,KAAK;AAAA,QACjD,YAAY,eAAe,SAAS;AAAA,QACpC,iBAAiB,eAAe,WAAW;AAAA,QAC3C,WAAW,CAAC,MAAM,WAAW,eAAe,SAAS;AAAA,MAC3D,GAAO,CAACA,YAAa,QAAQ;AAAA,QACvB,SAAS;AAAA,MACV,GAAE,IAAI,IAAG,WAAM,YAAN,+BAAgB,UAAU,QAAQ,CAAC,MAAM,eAAeA,YAAa,mBAAmB;AAAA,QAChG,YAAY;AAAA,UACV,OAAO;AAAA,YACL,MAAM,KAAK;AAAA,UACrB;AAAA,QACA;AAAA,MACA,GAAO;AAAA,QACD,SAAS,MAAA;;AAAM,kBAACA,YAAa,QAAQ;AAAA,YACnC,SAAS;AAAA,UACV,GAAE,GAACC,MAAA,MAAM,YAAN,gBAAAA,IAAA,YAAgB,UAAU,WAAUD,YAAa,OAAO,MAAM,IAAI,CAAC,CAAC,CAAC;AAAA;AAAA,MAC/E,CAAK,CAAC,CAAC,GAAG,CAAC,CAACE,iBAAkB,QAAQ,GAAG,MAAM,MAAM,CAAC,CAAC;AAAA,KAAC;AACpD,WAAO,CAAE;AAAA,EACb;AACA,CAAC;","names":["_withDirectives","_createVNode","_a","_resolveDirective"],"sources":["../../../../../../../../node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelTitle.mjs"],"sourcesContent":["import { createVNode as _createVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\";\n// Components\nimport { VExpansionPanelSymbol } from \"./shared.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\"; // Directives\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\nimport { computed, inject } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  hideActions: Boolean,\n  focusable: Boolean,\n  static: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false\n  },\n  readonly: Boolean,\n  ...makeComponentProps(),\n  ...makeDimensionProps()\n}, 'VExpansionPanelTitle');\nexport const VExpansionPanelTitle = genericComponent()({\n  name: 'VExpansionPanelTitle',\n  directives: {\n    Ripple\n  },\n  props: makeVExpansionPanelTitleProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'color');\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly\n    }));\n    const icon = computed(() => expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon);\n    useRender(() => _withDirectives(_createVNode(\"button\", {\n      \"class\": ['v-expansion-panel-title', {\n        'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n        'v-expansion-panel-title--focusable': props.focusable,\n        'v-expansion-panel-title--static': props.static\n      }, backgroundColorClasses.value, props.class],\n      \"style\": [backgroundColorStyles.value, dimensionStyles.value, props.style],\n      \"type\": \"button\",\n      \"tabindex\": expansionPanel.disabled.value ? -1 : undefined,\n      \"disabled\": expansionPanel.disabled.value,\n      \"aria-expanded\": expansionPanel.isSelected.value,\n      \"onClick\": !props.readonly ? expansionPanel.toggle : undefined\n    }, [_createVNode(\"span\", {\n      \"class\": \"v-expansion-panel-title__overlay\"\n    }, null), slots.default?.(slotProps.value), !props.hideActions && _createVNode(VDefaultsProvider, {\n      \"defaults\": {\n        VIcon: {\n          icon: icon.value\n        }\n      }\n    }, {\n      default: () => [_createVNode(\"span\", {\n        \"class\": \"v-expansion-panel-title__icon\"\n      }, [slots.actions?.(slotProps.value) ?? _createVNode(VIcon, null, null)])]\n    })]), [[_resolveDirective(\"ripple\"), props.ripple]]));\n    return {};\n  }\n});\n//# sourceMappingURL=VExpansionPanelTitle.mjs.map"],"version":3}