{"version":3,"file":"VTrendline.mjs","sources":["../../../../../../../../node_modules/vuetify/lib/components/VSparkline/VTrendline.mjs"],"sourcesContent":["// Utilities\nimport { computed, nextTick, ref, watch, createVNode as _createVNode } from 'vue';\nimport { makeLineProps } from \"./util/line.mjs\";\nimport { genPath as _genPath } from \"./util/path.mjs\";\nimport { genericComponent, getPropertyFromItem, getUid, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVTrendlineProps = propsFactory({\n  fill: Boolean,\n  ...makeLineProps()\n}, 'VTrendline');\nexport const VTrendline = genericComponent()({\n  name: 'VTrendline',\n  props: makeVTrendlineProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const uid = getUid();\n    const id = computed(() => props.id || `trendline-${uid}`);\n    const autoDrawDuration = computed(() => Number(props.autoDrawDuration) || (props.fill ? 500 : 2000));\n    const lastLength = ref(0);\n    const path = ref(null);\n    function genPoints(values, boundary) {\n      const {\n        minX,\n        maxX,\n        minY,\n        maxY\n      } = boundary;\n      const totalValues = values.length;\n      const maxValue = props.max != null ? Number(props.max) : Math.max(...values);\n      const minValue = props.min != null ? Number(props.min) : Math.min(...values);\n      const gridX = (maxX - minX) / (totalValues - 1);\n      const gridY = (maxY - minY) / (maxValue - minValue || 1);\n      return values.map((value, index) => {\n        return {\n          x: minX + index * gridX,\n          y: maxY - (value - minValue) * gridY,\n          value\n        };\n      });\n    }\n    const hasLabels = computed(() => {\n      return Boolean(props.showLabels || props.labels.length > 0 || !!slots?.label);\n    });\n    const lineWidth = computed(() => {\n      return parseFloat(props.lineWidth) || 4;\n    });\n    const totalWidth = computed(() => Number(props.width));\n    const boundary = computed(() => {\n      const padding = Number(props.padding);\n      return {\n        minX: padding,\n        maxX: totalWidth.value - padding,\n        minY: padding,\n        maxY: parseInt(props.height, 10) - padding\n      };\n    });\n    const items = computed(() => props.modelValue.map(item => getPropertyFromItem(item, props.itemValue, item)));\n    const parsedLabels = computed(() => {\n      const labels = [];\n      const points = genPoints(items.value, boundary.value);\n      const len = points.length;\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i];\n        let value = props.labels[i];\n        if (!value) {\n          value = typeof item === 'object' ? item.value : item;\n        }\n        labels.push({\n          x: item.x,\n          value: String(value)\n        });\n      }\n      return labels;\n    });\n    watch(() => props.modelValue, async () => {\n      await nextTick();\n      if (!props.autoDraw || !path.value) return;\n      const pathRef = path.value;\n      const length = pathRef.getTotalLength();\n      if (!props.fill) {\n        // Initial setup to \"hide\" the line by using the stroke dash array\n        pathRef.style.strokeDasharray = `${length}`;\n        pathRef.style.strokeDashoffset = `${length}`;\n\n        // Force reflow to ensure the transition starts from this state\n        pathRef.getBoundingClientRect();\n\n        // Animate the stroke dash offset to \"draw\" the line\n        pathRef.style.transition = `stroke-dashoffset ${autoDrawDuration.value}ms ${props.autoDrawEasing}`;\n        pathRef.style.strokeDashoffset = '0';\n      } else {\n        // Your existing logic for filled paths remains the same\n        pathRef.style.transformOrigin = 'bottom center';\n        pathRef.style.transition = 'none';\n        pathRef.style.transform = `scaleY(0)`;\n        pathRef.getBoundingClientRect();\n        pathRef.style.transition = `transform ${autoDrawDuration.value}ms ${props.autoDrawEasing}`;\n        pathRef.style.transform = `scaleY(1)`;\n      }\n      lastLength.value = length;\n    }, {\n      immediate: true\n    });\n    function genPath(fill) {\n      const smoothValue = typeof props.smooth === 'boolean' ? props.smooth ? 8 : 0 : Number(props.smooth);\n      return _genPath(genPoints(items.value, boundary.value), smoothValue, fill, parseInt(props.height, 10));\n    }\n    useRender(() => {\n      const gradientData = !props.gradient.slice().length ? [''] : props.gradient.slice().reverse();\n      return _createVNode(\"svg\", {\n        \"display\": \"block\",\n        \"stroke-width\": parseFloat(props.lineWidth) ?? 4\n      }, [_createVNode(\"defs\", null, [_createVNode(\"linearGradient\", {\n        \"id\": id.value,\n        \"gradientUnits\": \"userSpaceOnUse\",\n        \"x1\": props.gradientDirection === 'left' ? '100%' : '0',\n        \"y1\": props.gradientDirection === 'top' ? '100%' : '0',\n        \"x2\": props.gradientDirection === 'right' ? '100%' : '0',\n        \"y2\": props.gradientDirection === 'bottom' ? '100%' : '0'\n      }, [gradientData.map((color, index) => _createVNode(\"stop\", {\n        \"offset\": index / Math.max(gradientData.length - 1, 1),\n        \"stop-color\": color || 'currentColor'\n      }, null))])]), hasLabels.value && _createVNode(\"g\", {\n        \"key\": \"labels\",\n        \"style\": {\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor'\n        }\n      }, [parsedLabels.value.map((item, i) => _createVNode(\"text\", {\n        \"x\": item.x + lineWidth.value / 2 + lineWidth.value / 2,\n        \"y\": parseInt(props.height, 10) - 4 + (parseInt(props.labelSize, 10) || 7 * 0.75),\n        \"font-size\": Number(props.labelSize) || 7\n      }, [slots.label?.({\n        index: i,\n        value: item.value\n      }) ?? item.value]))]), _createVNode(\"path\", {\n        \"ref\": path,\n        \"d\": genPath(props.fill),\n        \"fill\": props.fill ? `url(#${id.value})` : 'none',\n        \"stroke\": props.fill ? 'none' : `url(#${id.value})`\n      }, null), props.fill && _createVNode(\"path\", {\n        \"d\": genPath(false),\n        \"fill\": \"none\",\n        \"stroke\": props.color ?? props.gradient?.[0]\n      }, null)]);\n    });\n  }\n});\n//# sourceMappingURL=VTrendline.mjs.map"],"names":["boundary","genPath","_genPath","_createVNode","_a"],"mappings":"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","x_google_ignoreList":[0]}