{"file":"VStepperWindow.mjs","mappings":";;;;;;;;AAOO,MAAM,0BAA0B,aAAa;AAAA,EAClD,GAAG,KAAK,iBAAoB,GAAA,CAAC,cAAc,YAAY,YAAY,cAAc,SAAS,WAAW,CAAC;AACxG,GAAG,gBAAgB;AACN,MAAA,iBAAiB,mBAAmB;AAAA,EAC/C,MAAM;AAAA,EACN,OAAO,wBAAwB;AAAA,EAC/B,OAAO;AAAA,IACL,qBAAqB,CAAK,MAAA;AAAA,EAC5B;AAAA,EACA,MAAM,OAAO,MAAM;AACb,QAAA;AAAA,MACF;AAAA,IAAA,IACE;AACE,UAAA,QAAQ,OAAO,gBAAgB,IAAI;AACnC,UAAA,SAAS,gBAAgB,OAAO,YAAY;AAClD,UAAM,QAAQ,SAAS;AAAA,MACrB,MAAM;;AAGJ,YAAI,OAAO,SAAS,QAAQ,CAAC,cAAc,OAAO;AAIlD,gBAAO,WAAM,MAAM,MAAM,KAAK,CAAQ,SAAA,MAAM,SAAS,MAAM,SAAS,KAAK,EAAE,CAAC,MAArE,mBAAwE;AAAA,MACjF;AAAA,MACA,IAAI,KAAK;AACP,eAAO,QAAQ;AAAA,MAAA;AAAA,IACjB,CACD;AACD,cAAU,MAAM;AACR,YAAA,cAAc,QAAQ,YAAY,KAAK;AACtC,aAAAA,YAAa,SAASC,WAAY;AAAA,QACvC,OAAO;AAAA,SACN,aAAa;AAAA,QACd,cAAc,MAAM;AAAA,QACpB,uBAAuB,CAAU,WAAA,MAAM,QAAQ;AAAA,QAC/C,SAAS,CAAC,oBAAoB,MAAM,KAAK;AAAA,QACzC,SAAS,MAAM;AAAA,QACf,aAAa;AAAA,QACb,SAAS;AAAA,MACV,CAAA,GAAG,KAAK;AAAA,IAAA,CACV;AACD,WAAO,CAAC;AAAA,EAAA;AAEZ,CAAC;","names":["_createVNode","_mergeProps"],"sources":["../../../../../../../../node_modules/vuetify/lib/components/VStepper/VStepperWindow.mjs"],"sourcesContent":["import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VStepperSymbol } from \"./shared.mjs\";\nimport { makeVWindowProps, VWindow } from \"../VWindow/VWindow.mjs\"; // Composables\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, inject } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVStepperWindowProps = propsFactory({\n  ...omit(makeVWindowProps(), ['continuous', 'nextIcon', 'prevIcon', 'showArrows', 'touch', 'mandatory'])\n}, 'VStepperWindow');\nexport const VStepperWindow = genericComponent()({\n  name: 'VStepperWindow',\n  props: makeVStepperWindowProps(),\n  emits: {\n    'update:modelValue': v => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const group = inject(VStepperSymbol, null);\n    const _model = useProxiedModel(props, 'modelValue');\n    const model = computed({\n      get() {\n        // Always return modelValue if defined\n        // or if not within a VStepper group\n        if (_model.value != null || !group) return _model.value;\n\n        // If inside of a VStepper, find the currently selected\n        // item by id. Item value may be assigned by its index\n        return group.items.value.find(item => group.selected.value.includes(item.id))?.value;\n      },\n      set(val) {\n        _model.value = val;\n      }\n    });\n    useRender(() => {\n      const windowProps = VWindow.filterProps(props);\n      return _createVNode(VWindow, _mergeProps({\n        \"_as\": \"VStepperWindow\"\n      }, windowProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-stepper-window', props.class],\n        \"style\": props.style,\n        \"mandatory\": false,\n        \"touch\": false\n      }), slots);\n    });\n    return {};\n  }\n});\n//# sourceMappingURL=VStepperWindow.mjs.map"],"version":3}