{"file":"VInfiniteScroll.mjs","mappings":"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","names":["_createVNode","_createTextVNode","status"],"sources":["../../../../../../../../node_modules/vuetify/lib/components/VInfiniteScroll/VInfiniteScroll.mjs"],"sourcesContent":["import { createTextVNode as _createTextVNode, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VInfiniteScroll.css\";\n\n// Components\nimport { VBtn } from \"../VBtn/index.mjs\";\nimport { VProgressCircular } from \"../VProgressCircular/index.mjs\"; // Composables\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\nimport { computed, nextTick, onMounted, ref, shallowRef, watch } from 'vue';\nimport { convertToUnit, defineComponent, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVInfiniteScrollProps = propsFactory({\n  color: String,\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: v => ['vertical', 'horizontal'].includes(v)\n  },\n  side: {\n    type: String,\n    default: 'end',\n    validator: v => ['start', 'end', 'both'].includes(v)\n  },\n  mode: {\n    type: String,\n    default: 'intersect',\n    validator: v => ['intersect', 'manual'].includes(v)\n  },\n  margin: [Number, String],\n  loadMoreText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.loadMore'\n  },\n  emptyText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.empty'\n  },\n  ...makeDimensionProps(),\n  ...makeTagProps()\n}, 'VInfiniteScroll');\nexport const VInfiniteScrollIntersect = defineComponent({\n  name: 'VInfiniteScrollIntersect',\n  props: {\n    side: {\n      type: String,\n      required: true\n    },\n    rootMargin: String\n  },\n  emits: {\n    intersect: (side, isIntersecting) => true\n  },\n  setup(props, _ref) {\n    let {\n      emit\n    } = _ref;\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    watch(isIntersecting, async val => {\n      emit('intersect', props.side, val);\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": \"v-infinite-scroll-intersect\",\n      \"style\": {\n        '--v-infinite-margin-size': props.rootMargin\n      },\n      \"ref\": intersectionRef\n    }, [_createTextVNode(\"\\xA0\")]));\n    return {};\n  }\n});\nexport const VInfiniteScroll = genericComponent()({\n  name: 'VInfiniteScroll',\n  props: makeVInfiniteScrollProps(),\n  emits: {\n    load: options => true\n  },\n  setup(props, _ref2) {\n    let {\n      slots,\n      emit\n    } = _ref2;\n    const rootEl = ref();\n    const startStatus = shallowRef('ok');\n    const endStatus = shallowRef('ok');\n    const margin = computed(() => convertToUnit(props.margin));\n    const isIntersecting = shallowRef(false);\n    function setScrollAmount(amount) {\n      if (!rootEl.value) return;\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';\n      rootEl.value[property] = amount;\n    }\n    function getScrollAmount() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';\n      return rootEl.value[property];\n    }\n    function getScrollSize() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth';\n      return rootEl.value[property];\n    }\n    function getContainerSize() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'clientHeight' : 'clientWidth';\n      return rootEl.value[property];\n    }\n    onMounted(() => {\n      if (!rootEl.value) return;\n      if (props.side === 'start') {\n        setScrollAmount(getScrollSize());\n      } else if (props.side === 'both') {\n        setScrollAmount(getScrollSize() / 2 - getContainerSize() / 2);\n      }\n    });\n    function setStatus(side, status) {\n      if (side === 'start') {\n        startStatus.value = status;\n      } else if (side === 'end') {\n        endStatus.value = status;\n      }\n    }\n    function getStatus(side) {\n      return side === 'start' ? startStatus.value : endStatus.value;\n    }\n    let previousScrollSize = 0;\n    function handleIntersect(side, _isIntersecting) {\n      isIntersecting.value = _isIntersecting;\n      if (isIntersecting.value) {\n        intersecting(side);\n      }\n    }\n    function intersecting(side) {\n      if (props.mode !== 'manual' && !isIntersecting.value) return;\n      const status = getStatus(side);\n      if (!rootEl.value || ['empty', 'loading'].includes(status)) return;\n      previousScrollSize = getScrollSize();\n      setStatus(side, 'loading');\n      function done(status) {\n        setStatus(side, status);\n        nextTick(() => {\n          if (status === 'empty' || status === 'error') return;\n          if (status === 'ok' && side === 'start') {\n            setScrollAmount(getScrollSize() - previousScrollSize + getScrollAmount());\n          }\n          if (props.mode !== 'manual') {\n            nextTick(() => {\n              window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => {\n                  window.requestAnimationFrame(() => {\n                    intersecting(side);\n                  });\n                });\n              });\n            });\n          }\n        });\n      }\n      emit('load', {\n        side,\n        done\n      });\n    }\n    const {\n      t\n    } = useLocale();\n    function renderSide(side, status) {\n      if (props.side !== side && props.side !== 'both') return;\n      const onClick = () => intersecting(side);\n      const slotProps = {\n        side,\n        props: {\n          onClick,\n          color: props.color\n        }\n      };\n      if (status === 'error') return slots.error?.(slotProps);\n      if (status === 'empty') return slots.empty?.(slotProps) ?? _createVNode(\"div\", null, [t(props.emptyText)]);\n      if (props.mode === 'manual') {\n        if (status === 'loading') {\n          return slots.loading?.(slotProps) ?? _createVNode(VProgressCircular, {\n            \"indeterminate\": true,\n            \"color\": props.color\n          }, null);\n        }\n        return slots['load-more']?.(slotProps) ?? _createVNode(VBtn, {\n          \"variant\": \"outlined\",\n          \"color\": props.color,\n          \"onClick\": onClick\n        }, {\n          default: () => [t(props.loadMoreText)]\n        });\n      }\n      return slots.loading?.(slotProps) ?? _createVNode(VProgressCircular, {\n        \"indeterminate\": true,\n        \"color\": props.color\n      }, null);\n    }\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    useRender(() => {\n      const Tag = props.tag;\n      const hasStartIntersect = props.side === 'start' || props.side === 'both';\n      const hasEndIntersect = props.side === 'end' || props.side === 'both';\n      const intersectMode = props.mode === 'intersect';\n      return _createVNode(Tag, {\n        \"ref\": rootEl,\n        \"class\": ['v-infinite-scroll', `v-infinite-scroll--${props.direction}`, {\n          'v-infinite-scroll--start': hasStartIntersect,\n          'v-infinite-scroll--end': hasEndIntersect\n        }],\n        \"style\": dimensionStyles.value\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": \"v-infinite-scroll__side\"\n        }, [renderSide('start', startStatus.value)]), hasStartIntersect && intersectMode && _createVNode(VInfiniteScrollIntersect, {\n          \"key\": \"start\",\n          \"side\": \"start\",\n          \"onIntersect\": handleIntersect,\n          \"rootMargin\": margin.value\n        }, null), slots.default?.(), hasEndIntersect && intersectMode && _createVNode(VInfiniteScrollIntersect, {\n          \"key\": \"end\",\n          \"side\": \"end\",\n          \"onIntersect\": handleIntersect,\n          \"rootMargin\": margin.value\n        }, null), _createVNode(\"div\", {\n          \"class\": \"v-infinite-scroll__side\"\n        }, [renderSide('end', endStatus.value)])]\n      });\n    });\n  }\n});\n//# sourceMappingURL=VInfiniteScroll.mjs.map"],"version":3}