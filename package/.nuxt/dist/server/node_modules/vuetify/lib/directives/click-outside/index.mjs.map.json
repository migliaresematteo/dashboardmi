{"file":"index.mjs","mappings":";AAEA,SAAS,qBAAqB;AACrB,SAAA;AACT;AACA,SAAS,WAAW,GAAG,IAAI,SAAS;AAKlC,MAAI,CAAC,KAAK,cAAc,GAAG,OAAO,MAAM,MAAc,QAAA;AAKhD,QAAA,OAAO,aAAa,EAAE;AACxB,MAAA,OAAO,eAAe,eAAe,gBAAgB,cAAc,KAAK,SAAS,EAAE,OAAe,QAAA;AAIhG,QAAA,YAAY,OAAO,QAAQ,UAAU,YAAY,QAAQ,MAAM,YAAY,MAAM,CAAA,IAAK;AAE5F,WAAS,KAAK,EAAE;AAOT,SAAA,CAAC,SAAS,KAAK,CAAAA,QAAMA,2BAAI,SAAS,EAAE,OAAO;AACpD;AACA,SAAS,cAAc,GAAG,SAAS;AACjC,QAAM,WAAW,OAAO,QAAQ,UAAU,YAAY,QAAQ,MAAM,oBAAoB;AACxF,SAAO,SAAS,CAAC;AACnB;AACA,SAAS,UAAU,GAAG,IAAI,SAAS;AAC3B,QAAA,UAAU,OAAO,QAAQ,UAAU,aAAa,QAAQ,QAAQ,QAAQ,MAAM;AAGpF,IAAE,eAAe,EAAE;AAChB,KAAA,cAAc,2BAA2B,WAAW,GAAG,IAAI,OAAO,KAAK,WAAW,MAAM;AACzF,kBAAc,GAAG,OAAO,KAAK,WAAW,QAAQ,CAAC;AAAA,KAChD,CAAC;AACN;AACA,SAAS,aAAa,IAAI,UAAU;AAC5B,QAAA,OAAO,aAAa,EAAE;AAC5B,WAAS,MAAQ;AACjB,MAAI,OAAO,eAAe,eAAe,gBAAgB,YAAY;AACnE,aAAS,IAAI;AAAA,EAAA;AAEjB;AACO,MAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1B,QAAQ,IAAI,SAAS;AACnB,UAAM,UAAU,CAAA,MAAK,UAAU,GAAG,IAAI,OAAO;AAC7C,UAAM,cAAc,CAAK,MAAA;AACvB,SAAG,cAAc,0BAA0B,WAAW,GAAG,IAAI,OAAO;AAAA,IACtE;AACA,iBAAa,IAAI,CAAO,QAAA;AAClB,UAAA,iBAAiB,SAAS,SAAS,IAAI;AACvC,UAAA,iBAAiB,aAAa,aAAa,IAAI;AAAA,IAAA,CACpD;AACG,QAAA,CAAC,GAAG,eAAe;AACrB,SAAG,gBAAgB;AAAA,QACjB,yBAAyB;AAAA,MAC3B;AAAA,IAAA;AAEF,OAAG,cAAc,QAAQ,SAAS,EAAE,GAAG,IAAI;AAAA,MACzC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,cAAc,IAAI,SAAS;AACrB,QAAA,CAAC,GAAG,cAAe;AACvB,iBAAa,IAAI,CAAO,QAAA;;AAClB,UAAA,CAAC,OAAO,GAAC,QAAG,kBAAH,mBAAmB,QAAQ,SAAS,EAAE,MAAM;AACnD,YAAA;AAAA,QACJ;AAAA,QACA;AAAA,MAAA,IACE,GAAG,cAAc,QAAQ,SAAS,EAAE,GAAG;AACvC,UAAA,oBAAoB,SAAS,SAAS,IAAI;AAC1C,UAAA,oBAAoB,aAAa,aAAa,IAAI;AAAA,IAAA,CACvD;AACD,WAAO,GAAG,cAAc,QAAQ,SAAS,EAAE,GAAG;AAAA,EAAA;AAElD;","names":["el"],"sources":["../../../../../../../../node_modules/vuetify/lib/directives/click-outside/index.mjs"],"sourcesContent":["// Utilities\nimport { attachedRoot } from \"../../util/index.mjs\"; // Types\nfunction defaultConditional() {\n  return true;\n}\nfunction checkEvent(e, el, binding) {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false;\n\n  // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n  const root = attachedRoot(el);\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot && root.host === e.target) return false;\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = (typeof binding.value === 'object' && binding.value.include || (() => []))();\n  // Add the root element for the component this directive was defined on\n  elements.push(el);\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  return !elements.some(el => el?.contains(e.target));\n}\nfunction checkIsActive(e, binding) {\n  const isActive = typeof binding.value === 'object' && binding.value.closeConditional || defaultConditional;\n  return isActive(e);\n}\nfunction directive(e, el, binding) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;\n\n  // Clicks in the Shadow DOM change their target while using setTimeout, so the original target is saved here\n  e.shadowTarget = e.target;\n  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e);\n  }, 0);\n}\nfunction handleShadow(el, callback) {\n  const root = attachedRoot(el);\n  callback(document);\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root);\n  }\n}\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  mounted(el, binding) {\n    const onClick = e => directive(e, el, binding);\n    const onMousedown = e => {\n      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);\n    };\n    handleShadow(el, app => {\n      app.addEventListener('click', onClick, true);\n      app.addEventListener('mousedown', onMousedown, true);\n    });\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: false\n      };\n    }\n    el._clickOutside[binding.instance.$.uid] = {\n      onClick,\n      onMousedown\n    };\n  },\n  beforeUnmount(el, binding) {\n    if (!el._clickOutside) return;\n    handleShadow(el, app => {\n      if (!app || !el._clickOutside?.[binding.instance.$.uid]) return;\n      const {\n        onClick,\n        onMousedown\n      } = el._clickOutside[binding.instance.$.uid];\n      app.removeEventListener('click', onClick, true);\n      app.removeEventListener('mousedown', onMousedown, true);\n    });\n    delete el._clickOutside[binding.instance.$.uid];\n  }\n};\nexport default ClickOutside;\n//# sourceMappingURL=index.mjs.map"],"version":3}