{"file":"validation.mjs","mappings":"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","names":[],"sources":["../../../../../../../node_modules/vuetify/lib/composables/validation.mjs"],"sourcesContent":["// Composables\nimport { makeFocusProps } from \"./focus.mjs\";\nimport { useForm } from \"./form.mjs\";\nimport { useProxiedModel } from \"./proxiedModel.mjs\";\nimport { useToggleScope } from \"./toggleScope.mjs\"; // Utilities\nimport { computed, nextTick, onBeforeMount, onBeforeUnmount, onMounted, ref, shallowRef, unref, watch } from 'vue';\nimport { getCurrentInstance, getCurrentInstanceName, getUid, propsFactory, wrapInArray } from \"../util/index.mjs\"; // Types\nexport const makeValidationProps = propsFactory({\n  disabled: {\n    type: Boolean,\n    default: null\n  },\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String],\n    default: () => []\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1\n  },\n  name: String,\n  label: String,\n  readonly: {\n    type: Boolean,\n    default: null\n  },\n  rules: {\n    type: Array,\n    default: () => []\n  },\n  modelValue: null,\n  validateOn: String,\n  validationValue: null,\n  ...makeFocusProps()\n}, 'validation');\nexport function useValidation(props) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getUid();\n  const model = useProxiedModel(props, 'modelValue');\n  const validationModel = computed(() => props.validationValue === undefined ? model.value : props.validationValue);\n  const form = useForm(props);\n  const internalErrorMessages = ref([]);\n  const isPristine = shallowRef(true);\n  const isDirty = computed(() => !!(wrapInArray(model.value === '' ? null : model.value).length || wrapInArray(validationModel.value === '' ? null : validationModel.value).length));\n  const errorMessages = computed(() => {\n    return props.errorMessages?.length ? wrapInArray(props.errorMessages).concat(internalErrorMessages.value).slice(0, Math.max(0, Number(props.maxErrors))) : internalErrorMessages.value;\n  });\n  const validateOn = computed(() => {\n    let value = (props.validateOn ?? form.validateOn?.value) || 'input';\n    if (value === 'lazy') value = 'input lazy';\n    if (value === 'eager') value = 'input eager';\n    const set = new Set(value?.split(' ') ?? []);\n    return {\n      input: set.has('input'),\n      blur: set.has('blur') || set.has('input') || set.has('invalid-input'),\n      invalidInput: set.has('invalid-input'),\n      lazy: set.has('lazy'),\n      eager: set.has('eager')\n    };\n  });\n  const isValid = computed(() => {\n    if (props.error || props.errorMessages?.length) return false;\n    if (!props.rules.length) return true;\n    if (isPristine.value) {\n      return internalErrorMessages.value.length || validateOn.value.lazy ? null : true;\n    } else {\n      return !internalErrorMessages.value.length;\n    }\n  });\n  const isValidating = shallowRef(false);\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--dirty`]: isDirty.value,\n      [`${name}--disabled`]: form.isDisabled.value,\n      [`${name}--readonly`]: form.isReadonly.value\n    };\n  });\n  const vm = getCurrentInstance('validation');\n  const uid = computed(() => props.name ?? unref(id));\n  onBeforeMount(() => {\n    form.register?.({\n      id: uid.value,\n      vm,\n      validate,\n      reset,\n      resetValidation\n    });\n  });\n  onBeforeUnmount(() => {\n    form.unregister?.(uid.value);\n  });\n  onMounted(async () => {\n    if (!validateOn.value.lazy) {\n      await validate(!validateOn.value.eager);\n    }\n    form.update?.(uid.value, isValid.value, errorMessages.value);\n  });\n  useToggleScope(() => validateOn.value.input || validateOn.value.invalidInput && isValid.value === false, () => {\n    watch(validationModel, () => {\n      if (validationModel.value != null) {\n        validate();\n      } else if (props.focused) {\n        const unwatch = watch(() => props.focused, val => {\n          if (!val) validate();\n          unwatch();\n        });\n      }\n    });\n  });\n  useToggleScope(() => validateOn.value.blur, () => {\n    watch(() => props.focused, val => {\n      if (!val) validate();\n    });\n  });\n  watch([isValid, errorMessages], () => {\n    form.update?.(uid.value, isValid.value, errorMessages.value);\n  });\n  async function reset() {\n    model.value = null;\n    await nextTick();\n    await resetValidation();\n  }\n  async function resetValidation() {\n    isPristine.value = true;\n    if (!validateOn.value.lazy) {\n      await validate(!validateOn.value.eager);\n    } else {\n      internalErrorMessages.value = [];\n    }\n  }\n  async function validate() {\n    let silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const results = [];\n    isValidating.value = true;\n    for (const rule of props.rules) {\n      if (results.length >= Number(props.maxErrors ?? 1)) {\n        break;\n      }\n      const handler = typeof rule === 'function' ? rule : () => rule;\n      const result = await handler(validationModel.value);\n      if (result === true) continue;\n      if (result !== false && typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`);\n        continue;\n      }\n      results.push(result || '');\n    }\n    internalErrorMessages.value = results;\n    isValidating.value = false;\n    isPristine.value = silent;\n    return internalErrorMessages.value;\n  }\n  return {\n    errorMessages,\n    isDirty,\n    isDisabled: form.isDisabled,\n    isReadonly: form.isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses\n  };\n}\n//# sourceMappingURL=validation.mjs.map"],"version":3}