{"file":"router.mjs","mappings":";;;;AAGO,SAAS,WAAW;AACnB,QAAA,KAAK,mBAAmB,UAAU;AACxC,SAAO,SAAS,MAAA;;AAAM,0CAAI,UAAJ,mBAAW;AAAA,GAAM;AACzC;AACO,SAAS,YAAY;;AACnB,UAAA,8BAAmB,WAAW,MAA9B,mBAAiC,UAAjC,mBAAwC;AACjD;AACgB,SAAA,QAAQ,OAAO,OAAO;;AAC9B,QAAA,aAAa,wBAAwB,YAAY;AACjD,QAAA,SAAS,SAAS,MAAM,CAAC,EAAE,MAAM,QAAQ,MAAM,GAAG;AAClD,QAAA,cAAc,SAAS,MAAM;AAC1B,YAAA,iCAAQ,UAAS,SAAS,OAAO,OAAO,KAAK,SAAS,OAAO,OAAO;AAAA,EAAA,CAC5E;AACD,MAAI,OAAO,eAAe,YAAY,EAAE,aAAa,aAAa;AAC1DA,UAAAA,QAAO,MAAM,OAAO,MAAM;AACzB,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA,MAAAA;AAAAA,MACA,WAAW,SAAS;AAAA,QAClB,MAAAA;AAAAA,MACD,CAAA;AAAA,IACH;AAAA,EAAA;AAGI,QAAA,YAAY,SAAS,OAAO;AAAA,IAChC,GAAG;AAAA,IACH,IAAI,MAAM,MAAM,MAAM,MAAM,EAAE;AAAA,EAAA,EAC9B;AACF,QAAM,aAAa,WAAW,QAAQ,UAAU,KAAK;AAErD,QAAM,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,MAAS;AAC7D,QAAM,QAAQ,SAAS;AACjB,QAAA,WAAW,SAAS,MAAM;;AAC1B,QAAA,CAAC,KAAK,MAAc,QAAA;AACxB,QAAI,CAAC,MAAM,gBAAcC,MAAA,KAAK,MAAM,aAAX,gBAAAA,IAAqB,UAAS;AACvD,QAAI,CAAC,MAAM,gBAAcC,MAAA,KAAK,MAAM,kBAAX,gBAAAA,IAA0B,UAAS;AAC5D,aAAO,UAAK,MAAM,kBAAX,mBAA0B,UAAS,UAAU,KAAK,MAAM,MAAM,MAAM,OAAO,MAAM,MAAM,KAAK;AAAA,EAAA,CACpG;AACK,QAAA,OAAO,SAAS,MAAM;;AAAA,iBAAM,MAAKD,MAAA,KAAK,UAAL,gBAAAA,IAAY,MAAM,MAAM,OAAO,MAAM;AAAA,GAAI;AACzE,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAO,UAAK,UAAL,mBAAY;AAAA,IACnB,WAAU,UAAK,UAAL,mBAAY;AAAA,IACtB;AAAA,IACA,WAAW,SAAS;AAAA,MAClB;AAAA,MACA,gBAAgB,SAAS,MAAM,SAAS,QAAQ,SAAS,MAAS;AAAA,IACnE,CAAA;AAAA,EACH;AACF;AACO,MAAM,kBAAkB,aAAa;AAAA,EAC1C,MAAM;AAAA,EACN,SAAS;AAAA,EACT,IAAI,CAAC,QAAQ,MAAM;AAAA,EACnB,OAAO;AACT,GAAG,QAAQ;","names":["href","_a","_b"],"sources":["../../../../../../../node_modules/vuetify/lib/composables/router.mjs"],"sourcesContent":["// Utilities\nimport { computed, nextTick, onScopeDispose, reactive, resolveDynamicComponent, toRef } from 'vue';\nimport { deepEqual, getCurrentInstance, hasEvent, IN_BROWSER, propsFactory } from \"../util/index.mjs\"; // Types\nexport function useRoute() {\n  const vm = getCurrentInstance('useRoute');\n  return computed(() => vm?.proxy?.$route);\n}\nexport function useRouter() {\n  return getCurrentInstance('useRouter')?.proxy?.$router;\n}\nexport function useLink(props, attrs) {\n  const RouterLink = resolveDynamicComponent('RouterLink');\n  const isLink = computed(() => !!(props.href || props.to));\n  const isClickable = computed(() => {\n    return isLink?.value || hasEvent(attrs, 'click') || hasEvent(props, 'click');\n  });\n  if (typeof RouterLink === 'string' || !('useLink' in RouterLink)) {\n    const href = toRef(props, 'href');\n    return {\n      isLink,\n      isClickable,\n      href,\n      linkProps: reactive({\n        href\n      })\n    };\n  }\n  // vue-router useLink `to` prop needs to be reactive and useLink will crash if undefined\n  const linkProps = computed(() => ({\n    ...props,\n    to: toRef(() => props.to || '')\n  }));\n  const routerLink = RouterLink.useLink(linkProps.value);\n  // Actual link needs to be undefined when to prop is not used\n  const link = computed(() => props.to ? routerLink : undefined);\n  const route = useRoute();\n  const isActive = computed(() => {\n    if (!link.value) return false;\n    if (!props.exact) return link.value.isActive?.value ?? false;\n    if (!route.value) return link.value.isExactActive?.value ?? false;\n    return link.value.isExactActive?.value && deepEqual(link.value.route.value.query, route.value.query);\n  });\n  const href = computed(() => props.to ? link.value?.route.value.href : props.href);\n  return {\n    isLink,\n    isClickable,\n    isActive,\n    route: link.value?.route,\n    navigate: link.value?.navigate,\n    href,\n    linkProps: reactive({\n      href,\n      'aria-current': computed(() => isActive.value ? 'page' : undefined)\n    })\n  };\n}\nexport const makeRouterProps = propsFactory({\n  href: String,\n  replace: Boolean,\n  to: [String, Object],\n  exact: Boolean\n}, 'router');\nlet inTransition = false;\nexport function useBackButton(router, cb) {\n  let popped = false;\n  let removeBefore;\n  let removeAfter;\n  if (IN_BROWSER && router?.beforeEach) {\n    nextTick(() => {\n      window.addEventListener('popstate', onPopstate);\n      removeBefore = router.beforeEach((to, from, next) => {\n        if (!inTransition) {\n          setTimeout(() => popped ? cb(next) : next());\n        } else {\n          popped ? cb(next) : next();\n        }\n        inTransition = true;\n      });\n      removeAfter = router?.afterEach(() => {\n        inTransition = false;\n      });\n    });\n    onScopeDispose(() => {\n      window.removeEventListener('popstate', onPopstate);\n      removeBefore?.();\n      removeAfter?.();\n    });\n  }\n  function onPopstate(e) {\n    if (e.state?.replaced) return;\n    popped = true;\n    setTimeout(() => popped = false);\n  }\n}\n//# sourceMappingURL=router.mjs.map"],"version":3}