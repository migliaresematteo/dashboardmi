import { useProxiedModel } from "./proxiedModel.mjs";
import { computed } from "vue";
import { propsFactory } from "../util/propsFactory.mjs";
import { getCurrentInstanceName } from "../util/getCurrentInstance.mjs";
import { EventProp } from "../util/helpers.mjs";
const makeFocusProps = propsFactory({
  focused: Boolean,
  "onUpdate:focused": EventProp()
}, "focus");
function useFocus(props) {
  let name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getCurrentInstanceName();
  const isFocused = useProxiedModel(props, "focused");
  const focusClasses = computed(() => {
    return {
      [`${name}--focused`]: isFocused.value
    };
  });
  function focus() {
    isFocused.value = true;
  }
  function blur() {
    isFocused.value = false;
  }
  return {
    focusClasses,
    isFocused,
    focus,
    blur
  };
}
export {
  makeFocusProps,
  useFocus
};
//# sourceMappingURL=focus.mjs.map
