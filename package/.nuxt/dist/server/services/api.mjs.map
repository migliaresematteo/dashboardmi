{"version":3,"file":"api.mjs","sources":["../../../../services/api.ts"],"sourcesContent":["// API Service per Mercato Itinerante\nimport { ref } from 'vue';\n\n// Configurazione di base\nconst API_BASE_URL = ref('');\nconst API_KEY = ref('');\n\n// Funzione per impostare la configurazione\nexport const setApiConfig = (baseUrl: string, apiKey: string) => {\n  API_BASE_URL.value = baseUrl;\n  API_KEY.value = apiKey;\n};\n\n// Funzione per ottenere l'URL base dell'API\nconst getApiBaseUrl = () => {\n  if (API_BASE_URL.value) {\n    return API_BASE_URL.value;\n  }\n  \n  // Usa la configurazione runtime di Nuxt se disponibile\n  try {\n    const config = useRuntimeConfig();\n    return config.public.apiBaseUrl || '';\n  } catch (e) {\n    // Se useRuntimeConfig non è disponibile, usa il valore di default\n  }\n  \n  // Fallback basato sull'ambiente\n  return process.env.NODE_ENV === 'production'\n    ? 'https://www.mercatoitinerante.it'\n    : '';\n};\n\n// Funzione per ottenere l'API key\nconst getApiKey = () => {\n  if (API_KEY.value) {\n    return API_KEY.value;\n  }\n  \n  // Usa la configurazione runtime di Nuxt se disponibile\n  try {\n    const config = useRuntimeConfig();\n    return config.apiKey || '';\n  } catch (e) {\n    // Se useRuntimeConfig non è disponibile, ritorna vuoto\n    return '';\n  }\n};\n\n// Funzione generica per le chiamate API\nconst fetchApi = async (endpoint: string, options: RequestInit = {}) => {\n  try {\n    const baseUrl = getApiBaseUrl();\n    const url = `${baseUrl}${endpoint}`;\n    \n    // Prepara gli headers\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...(options.headers as Record<string, string> || {})\n    };\n    \n    // Aggiungi l'API key\n    const apiKey = getApiKey();\n    if (apiKey) {\n      headers['x-api-key'] = apiKey;\n    }\n    \n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API error: ${response.status} - ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// API specifiche\nexport const api = {\n  // Negozi\n  getStores: () => fetchApi('/wp-json/wp/v2/store'),\n  \n  // Categorie negozi\n  getStoreCategories: () => fetchApi('/wp-json/wp/v2/store_category?parent=0&per_page=100'),\n  \n  // Franchising\n  getFranchising: () => fetchApi('/wp-json/mi_plugin/v1/franchisings'),\n  \n  // Venditori\n  getVendors: (storeId: number, slug?: string) => {\n    let endpoint = `/wp-json/mi_plugin/v1/get-vendors?store=${storeId}`;\n    if (slug) endpoint += `&slug=${slug}`;\n    return fetchApi(endpoint);\n  },\n  \n  // Prodotti\n  getProducts: (params: {\n    s?: string,  // search query\n    store?: number,\n    vendors?: string,\n    categories?: string,\n    shipping_days?: number,\n    user_roles?: string,\n    limit?: number,\n    page?: number,\n    stock_status?: string,\n    type?: string\n  } = {}) => {\n    const queryParams = Object.entries(params)\n      .filter(([_, value]) => value !== undefined)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&');\n    \n    const endpoint = `/wp-json/mi_plugin/v1/get-products${queryParams ? `?${queryParams}` : ''}`;\n    return fetchApi(endpoint);\n  },\n  \n  // Spedizioni\n  getShippings: (storeId: number, cap: string, amount?: number) => {\n    let endpoint = `/wp-json/mi_plugin/v1/get-shippings?store=${storeId}&cap=${cap}`;\n    if (amount !== undefined) endpoint += `&amount=${amount}`;\n    return fetchApi(endpoint);\n  },\n  \n  // Validazione CAP\n  validateCap: (cap: string) => fetchApi(`/wp-json/mi_plugin/v1/validate-cap?cap=${cap}`),\n  \n  // Login\n  login: (credentials: { email: string, password: string, googleToken?: string, token?: string }) => {\n    return fetchApi('/wp-json/df_theme/v1/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  },\n  \n  // Registrazione\n  register: (userData: {\n    referral?: number,\n    registrationType: 'client' | 'gruppo_acquisto' | 'business',\n    email: string,\n    password: string,\n    confirm_password: string,\n    privacy: number,\n    privacy_mkt: number,\n    meta?: any[],\n    googleToken?: string\n  }) => {\n    return fetchApi('/wp-json/df_theme/v1/login', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  },\n  \n  // Guadagni venditore\n  getVendorEarnings: (params: {\n    token: string,\n    start: string,\n    end: string,\n    order_status?: string,\n    vendor_id?: number\n  }) => {\n    const queryParams = Object.entries(params)\n      .filter(([_, value]) => value !== undefined)\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&');\n    \n    return fetchApi(`/wp-json/mi_plugin/v1/vendor-earnings?${queryParams}`);\n  },\n\n  // API per dashboard amministrativa\n\n  // Dashboard data functions - Simulazioni temporanee\n  getMonthlyOrders: async (month: string, year: string) => {\n    try {\n      // Usa l'URL completo di mercatoitinerante\n      const baseUrl = getApiBaseUrl();\n      const response = await fetchApi(`/get-products?limit=100&month=${month}&year=${year}`);\n      \n      // Se la chiamata API reale fallisce, usa i dati simulati\n      if (!response || !response.data) {\n        throw new Error('Nessun dato ricevuto dall\\'API');\n      }\n      \n      // Trasforma i dati dei prodotti in ordini (logica temporanea)\n      const orders = response.data.slice(0, 20).map((product: any, index: number) => ({\n        id: index + 1,\n        status: ['Completato', 'In elaborazione', 'Spedito', 'Consegnato'][Math.floor(Math.random() * 4)],\n        creationDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('it-IT'),\n        client: product.name || `Cliente ${index + 1}`,\n        email: `cliente${index + 1}@email.com`,\n        total: parseFloat((Math.random() * 200 + 50).toFixed(2)),\n        payment: ['Carta di Credito', 'PayPal', 'Bonifico', 'Contanti'][Math.floor(Math.random() * 4)],\n        market: 'Mercato Centrale'\n      }));\n      \n      return {\n        orders: orders,\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    } catch (error) {\n      console.error('Errore API, uso dati simulati:', error);\n      // Fallback ai dati simulati\n      return {\n        orders: Array.from({ length: 20 }, (_, i) => ({\n          id: i + 1,\n          status: ['Completato', 'In elaborazione', 'Spedito', 'Consegnato'][Math.floor(Math.random() * 4)],\n          creationDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('it-IT'),\n          client: `Cliente ${i + 1}`,\n          email: `cliente${i + 1}@email.com`,\n          total: parseFloat((Math.random() * 200 + 50).toFixed(2)),\n          payment: ['Carta di Credito', 'PayPal', 'Bonifico', 'Contanti'][Math.floor(Math.random() * 4)],\n          market: 'Mercato Centrale'\n        })),\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    }\n  },\n\n  // Consegne rider\n  getRiderDeliveries: async (month: string) => {\n    try {\n      return {\n        riderDeliveries: Array.from({ length: 10 }, (_, i) => ({\n          id: i + 1,\n          name: `Rider ${i + 1}`,\n          currentMonth: {\n            count: Math.floor(Math.random() * 100) + 50,\n            onTime: Math.floor(Math.random() * 80) + 40,\n            late: Math.floor(Math.random() * 20) + 5\n          },\n          rating: parseFloat((Math.random() * 2 + 3).toFixed(1)),\n          vehicle: ['Bicicletta elettrica', 'Scooter elettrico', 'Auto elettrica'][Math.floor(Math.random() * 3)],\n          zone: ['Milano Centro', 'Milano Nord', 'Milano Sud', 'Milano Est', 'Milano Ovest'][Math.floor(Math.random() * 5)]\n        })),\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    } catch (error) {\n      console.error('Errore nel recupero delle consegne rider:', error);\n      throw error;\n    }\n  },\n\n  // Consegne per CAP\n  getPostalCodeDeliveries: async (timeSlot: string) => {\n    try {\n      const postalCodes = ['20121', '20122', '20123', '20124', '20125'];\n      return {\n        postalCodeDeliveries: postalCodes.map((code, index) => ({\n          postalCode: code,\n          zone: `Milano ${['Centro', 'Centro-Sud', 'Centro-Ovest', 'Centro-Est', 'Nord'][index]}`,\n          deliveries: ['08:00-10:00', '10:00-12:00', '12:00-14:00', '14:00-16:00', '16:00-18:00', '18:00-20:00'].map(slot => ({\n            timeSlot: slot,\n            count: Math.floor(Math.random() * 30) + 5,\n            onTime: Math.floor(Math.random() * 25) + 5\n          })),\n          totalDeliveries: Math.floor(Math.random() * 100) + 50,\n          averageTime: Math.floor(Math.random() * 10) + 20\n        })),\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    } catch (error) {\n      console.error('Errore nel recupero delle consegne per CAP:', error);\n      throw error;\n    }\n  },\n\n  // Tipologie di pagamento\n  getPaymentTypes: async (date: string) => {\n    try {\n      return {\n        paymentData: {\n          date,\n          payments: [\n            { type: 'Carta di Credito', count: Math.floor(Math.random() * 50) + 30, amount: Math.floor(Math.random() * 2000) + 1000 },\n            { type: 'PayPal', count: Math.floor(Math.random() * 30) + 15, amount: Math.floor(Math.random() * 1500) + 800 },\n            { type: 'Bonifico', count: Math.floor(Math.random() * 15) + 5, amount: Math.floor(Math.random() * 2000) + 1000 },\n            { type: 'Contanti', count: Math.floor(Math.random() * 20) + 10, amount: Math.floor(Math.random() * 600) + 300 },\n            { type: 'Satispay', count: Math.floor(Math.random() * 20) + 10, amount: Math.floor(Math.random() * 500) + 200 }\n          ]\n        },\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    } catch (error) {\n      console.error('Errore nel recupero delle tipologie di pagamento:', error);\n      throw error;\n    }\n  },\n\n  // Ordini B2B\n  getB2BOrders: async (period: string) => {\n    try {\n      const vendors = await api.getVendors(23);\n      \n      return {\n        b2bOrders: vendors.slice(0, 10).map((vendor: any, index: number) => ({\n          id: 2000 + index,\n          company: vendor.name || `Azienda ${index + 1}`,\n          contact: `Contatto ${index + 1}`,\n          email: `azienda${index + 1}@example.com`,\n          orders: Math.floor(Math.random() * 50) + 10,\n          total: Math.floor(Math.random() * 10000) + 2000,\n          lastOrder: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          status: ['Attivo', 'In pausa', 'Nuovo cliente'][Math.floor(Math.random() * 3)]\n        })),\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    } catch (error) {\n      console.error('Errore nel recupero degli ordini B2B:', error);\n      \n      // Fallback a dati mock\n      return {\n        b2bOrders: Array.from({ length: 10 }, (_, i) => ({\n          id: 2000 + i,\n          company: `Azienda ${i + 1}`,\n          contact: `Contatto ${i + 1}`,\n          email: `azienda${i + 1}@example.com`,\n          orders: Math.floor(Math.random() * 50) + 10,\n          total: Math.floor(Math.random() * 10000) + 2000,\n          lastOrder: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          status: ['Attivo', 'In pausa', 'Nuovo cliente'][Math.floor(Math.random() * 3)]\n        })),\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    }\n  },\n\n  // Impatto ambientale\n  getEnvironmentalImpact: async (year: string) => {\n    try {\n      const months = ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', \n                      'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'];\n      \n      return {\n        environmentalData: {\n          year,\n          monthlyData: months.map((month) => ({\n            month,\n            co2Saved: Math.floor(Math.random() * 500) + 200,\n            plasticReduced: Math.floor(Math.random() * 300) + 100,\n            localProducers: Math.floor(Math.random() * 20) + 30,\n            sustainableProducts: Math.floor(Math.random() * 100) + 50\n          })),\n          totals: {\n            co2Saved: Math.floor(Math.random() * 5000) + 3000,\n            plasticReduced: Math.floor(Math.random() * 3000) + 1500,\n            localProducers: Math.floor(Math.random() * 50) + 100,\n            sustainableProducts: Math.floor(Math.random() * 1000) + 500\n          }\n        },\n        lastUpdate: new Date().toLocaleString('it-IT')\n      };\n    } catch (error) {\n      console.error('Errore nel recupero dei dati di impatto ambientale:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;"],"names":[],"mappings":"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"}